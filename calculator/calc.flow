// построить дерево
// посчитать значение
// дерево обратно в строку

import runtime;
import lingo/pegcode/driver;

ArExpr ::= ArSum, ArMul, ArInt;
    ArSum(lhs: ArExpr, rhs: ArExpr);
    ArMul(lhs: ArExpr, rhs: ArExpr);
    ArInt(value: int);

s2ar(str: string) -> ArExpr {
    grammar_src = "#include grammar.lingo";
    grammar = compilePegGrammar(grammar_src);
    actions = defaultPegActions;
    parsic(grammar, str, actions);
}

ar2s(expr: ArExpr) -> string {
    switch (expr) {
        ArSum(lhs, rhs): concatStrings(["(", ar2s(lhs), " + ", ar2s(rhs), ")"])
        ArMul(lhs, rhs): concatStrings(["(", ar2s(lhs), " * ", ar2s(rhs), ")"])
        ArInt(value): i2s(value)
    }
}

evaluate(expr: ArExpr) -> int {
    switch (expr) {
        ArSum(lhs, rhs): evaluate(lhs) + evaluate(rhs)
        ArMul(lhs, rhs): evaluate(lhs) * evaluate(rhs)
        ArInt(value): value
    }
}

Token ::= TokenInt, TokenMul, TokenAdd;
    TokenInt(value: int);
    TokenMul();
    TokenAdd();

expr2rpn(expr: ArExpr) -> [Token] {
    switch (expr) {
        ArSum(lhs, rhs): concat3(expr2rpn(lhs), expr2rpn(rhs), [TokenAdd()])
        ArMul(lhs, rhs): concat3(expr2rpn(lhs), expr2rpn(rhs), [TokenMul()])
        ArInt(value): [TokenInt(value)]
    }
}

rpn2string(tokens: [Token]) -> string {
    strGlue(map(tokens, \tok -> {
        switch(tok) {
            TokenAdd(): "+"
            TokenMul(): "*"
            TokenInt(val): i2s(val)
        }
    }), " ");
}

rpn2int(tokens: [Token]) -> int {    
    result = fold(tokens, [], \stack, token -> {
        switch (token) {
            TokenInt(value): {
                arrayPush(stack, value)
            }

            TokenMul(): {
                lhs = stack[length(stack) - 1];
                rhs = stack[length(stack) - 2];

                arrayPush(subrange(stack, 0, length(stack) - 2), lhs * rhs)
            }

            TokenAdd(): {
                lhs = stack[length(stack) - 1];
                rhs = stack[length(stack) - 2];

                arrayPush(subrange(stack, 0, length(stack) - 2), lhs + rhs)
            }
        }
    });

    result[0]
}

rpn2expr(prn: [Token]) -> ArExpr {
    result = fold(prn, [], \stack, token -> {
        switch (token) {
            TokenInt(value): {
                arrayPush(stack, ArInt(value))
            }

            TokenMul(): {
                lhs = stack[length(stack) - 1];
                rhs = stack[length(stack) - 2];

                arrayPush(subrange(stack, 0, length(stack) - 2), ArMul(rhs, lhs))
            }

            TokenAdd(): {
                lhs = stack[length(stack) - 1];
                rhs = stack[length(stack) - 2];

                arrayPush(subrange(stack, 0, length(stack) - 2), ArSum(rhs, lhs))
            }
        }
    });

    result[0]
}

main() {
    example = "((52 + 77) * (14 + 3))";
    expr = s2ar(example);   
    rpn = expr2rpn(expr);
    rpn_string = rpn2string(rpn);
    result = rpn2int(rpn);
    expr_from_rpn = rpn2expr(rpn);
    expr_to_string = ar2s(expr_from_rpn);

    println(example);
    println(expr);
    println(rpn);
    println(rpn_string);
    println(result);
    println(expr_to_string);
}