import runtime;

import nemo;
import verification;
import z3;

// ∧
// ∨
// →

main() {
    _example = "
        {(x = a ∧ y = b)}
        {
            VAR x: INT;
            VAR y: INT;
            {
                x := (x + y);
                y := (x - y);
                x := (x - y);
            }
        }
        {(x = b ∧ y = a)}
    ";

    __example1 = "
        {n >= 0}
        {
            VAR n: INT;
            VAR x: INT;
            VAR y: INT;
            {
                n := 12;
                x := 0;
                y := 0;
                {
                    {y <= n} {
                        (y <= n)?;
                        y := (y + (x + (x + 1)));
                        x := (x + 1);
                    }*;
                    (!(y <= n))?;
                };
                x := (x - 1);
            }
        }
        {((x * x) <= n ∧ ((x + 1) * (x + 1)) > n)}
    ";

    example = "
        formula divides(x, y) 
            (
                x > 0 &
                (
                    y > 0 &
                    E t.y = (t * x)
                )
            )
            
        formula gcd(x, y, z)
            (
                x > 0 &
                (
                    y > 0 &
                    (
                        divides(z, x) &
                        (
                            divides(z, y) &
                            A s.((divides(s, x) & divides(s, y)) -> s <= z)
                        )
                    )
                )
            )

        { (x = a & y = b) }
        {
            VAR x : INT;
            VAR y : INT;
            VAR a : INT;
            VAR b : INT;
            VAR z : INT;
            VAR t : INT;
            VAR s : INT;
            {
                { A t.(gcd(a, b, t) <-> gcd(x, y, t)) } {
                    {{ (x > y)?; x := (x - y); } U
                    { (x < y)?; y := (y - x); }};
                }*;
                (x = y)?;
            }
        }
        { gcd(a, b, x) }
    ";

        example3 = "
        function sqr(x)
        (x * x)

        { n >= 0 }
        {
            VAR n : INT;
            VAR x : INT;
            VAR y : INT;
            {
                x := 0;
                y := 0;

                { (n >= 0 & (y = x & ((x - 1) <= n || x = 0))) }
                {
                    x := 0;
                }*;
                (y <= n)?;
                x := (x - 1);
            }
        }
        { (sqr(x) <= n & sqr((1 + x)) > n) }
    ";

    example2 = "
        function sqr(x)
        (x * x)

        { n >= 0 }
        {
            VAR n : INT;
            VAR x : INT;
            VAR y : INT;
            {

                { (n >= 0 & (y = x & (TRUE V TRUE))) }
                {
                    x := 0;
                }*;
                (y <= n)?;
                x := (x - 1);
            }
        }
        { TRUE }
    ";

    Example1 = "
        formula divides(x, y) 
            (
                x > 0 &
                (
                    y > 0 &
                    E t.y = (t * x)
                )
            )
        formula gcd(x, y, z)
            (
                x > 0 &
                (
                    y > 0 &
                    (
                        divides(z, x) &
                        (
                            divides(z, y) &
                            A s.((divides(s, x) & divides(s, y)) -> s <= z)
                        )
                    )
                )
            )

        { (x = a & y = b) }
        {
            VAR x : INT;
            VAR y : INT;
            VAR a : INT;
            VAR b : INT;
            VAR z : INT;
            VAR t : INT;
            VAR s : INT;
            {   
                { A t.(gcd(a, b, t) <-> gcd(x, y, t)) } {
                    {{ (x > y) ? ; x := (x - y); } U
                    { (x < y) ? ; y := (y - x); }};
                }*;
            (x = y)?;
            }
        }
        { gcd(a, b, x) }
    ";  


    Example2 = "
        function sqr(x)
        (x * x)

        { n >= 0 }
        {
            VAR n : INT;
            VAR x : INT;
            VAR y : INT;
            {
                x := 0;
                y := 0;
                { (n >= 0 & (y = x & ((x - 1) <= n || x = 0))) }
                {
                    (y <= n)?;
                    y := (y + (x + (x + 1)));
                    x := (x + 1);
                }*;
                (!(y <= n))?;
                x := (x - 1);
            }
        }
        { (sqr(x) <= n & sqr((1 + x)) > n) }
    ";

    EXAMPLE1 = "
        VAR x : INT;
        VAR y : INT;
        VAR a : INT;
        VAR b : INT;
        VAR z : INT;
        VAR t : INT;
        VAR s : INT;

        formula divides(x, y) 
            (
                (x > 0) &
                (
                    (y > 0) &
                    E t.(y = (t * x))
                )
            )
        
        formula gcd(x, y, z)
            (
                (x > 0) &
                (
                    (y > 0) &
                    (
                        divides(z, x) &
                        (
                            divides(z, y) &
                            A s.((divides(s, x) & divides(s, y)) -> (s <= z))
                        )
                    )
                )
            )

        { ((x = a) & (y = b)) }
        {
            { A t.(gcd(a, b, t) <-> gcd(x, y, t)) } {
                {{ (x > y)?; x := (x - y); } U
                { (x < y)?; y := (y - x); }};
            }*;
            (x = y)?;
        }
        { gcd(a, b, x) }
    ";

    EXAMPLE2 = "
        VAR n : INT;
        VAR x : INT;
        VAR y : INT;

        function sqr(x)
        (x * x)

        { (n >= 0) }
        {
            x := 0;
            y := 0;
            { ((n >= 0) & ((y = sqr(x)) & ((sqr((x - 1)) <= n) || (x = 0)))) }
            {(y <= n)?;
                y := (y + (x + (x + 1)));
                x := (x + 1);
                
            }*;
            !(y <= n)?;
            x := (x - 1);
        }
        { ((sqr(x) <= n) & (sqr((1 + x)) > n)) }
    ";

    triple = parseAst(EXAMPLE1);
    // println(triple);

    println("AST:\n");
    println(triple);
    println("\n");

    if (isValidProgram(triple.program)) {
        vc = findVC(triple.pre, triple.program.body, triple.post);

        println("Verification Conditions:");
        iterSet(
            vc,
            \formula -> println(cond2s(formula) + "\n")
        );

        switch (translateZ3(triple, set2array(vc))) {
            Some(z3): {
                println("Z3:");
                println(z3);
            }

            None(): {
                println("Error translating to Z3");
            }
        }
    } else {
        println("FAIL");
    }
}