import runtime;

import nemo;
import verification;
import z3;

// ∧
// ∨
// →

main() {
    example1 = "
        {(x = a ∧ y = b)}
        VAR a: INT;
        VAR b: INT;
        VAR x: INT;
        VAR y: INT;
        {
            x := (x + y);
            y := (x - y);
            x := (x - y);
        }
        {(x = b ∧ y = a)}
    ";

    example = "
        {n >= 0}
        VAR n: INT;
        VAR x: INT;
        VAR y: INT;
        {
            n := 12;
            x := 0;
            y := 0;
            {
                {
                    (y <= n)?;
                    y := (y + (x + (x + 1)));
                    x := (x + 1);
                }* {TRUE};
                (!(y <= n))?;
            };
            x := (x - 1);
        }
        {((x * x) <= n ∧ ((x + 1) * (x + 1)) > n)}
    ";

    triple = parseAst(example);

    println("AST:\n");
    println(triple);
    println("\n");

    if (isValidProgram(triple.program)) {
        vc = findVC(triple.pre, triple.program.body, triple.post);

        iterSet(
            vc,
            \formula -> println(cond2s(formula) + "\n")
        );

        z3 = translateZ3(triple, set2array(vc));

        println("Z3:");
        println(z3);
    } else {
        println("FAIL");
    }
}